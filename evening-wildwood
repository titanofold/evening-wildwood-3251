#!/usr/bin/env perl
use Mojolicious::Lite;
use DBIx::Connector;

my $conn
  = DBIx::Connector->new("dbi:Pg:$ENV{DATABASE_URL}", '', '',
  {AutoCommit => 0})
  or die;
$conn->mode('fixup');

helper 'db.foreman_for' => sub {
  my ($self, $op) = @_;
  $conn->run(
    sub {
      $_->selectrow_array(
        q|SELECT ew.pilots.name
                            FROM ew.ops JOIN ew.pilots ON ew.ops.foreman = ew.pilots.id
                            WHERE ew.ops.id = ?|, undef, $op
      );
    }
  );
};

# List pilots for the given op. Returns array ref
helper 'db.pilots_for' => sub {
  my ($self, $op) = @_;
  $conn->run(
    sub {
      $_->selectcol(q|SELECT pilot_id FROM ew.op_participants WHERE op_id = ?|,
        undef, $op);
    }
  );
};

# Returns 1 if found, else 0
helper 'db.op_exists' => sub {
  my ($self, $op) = @_;
  $conn->run(
    sub {
      $_->selectrow_array(q|SELECT COUNT(*) FROM ew.ops WHERE id = ?|,
        undef, $op);
    }
  );
};

helper get_header_value => sub { return shift->req->headers->header(shift) };

helper format_number => sub {
  use Number::Format;
  my ($self, $n) = @_;
  state $f = Number::Format->new(-thousands_sep => ',', -decimal_point => '.');
  return $f->format_number($n);
};

get '/' => sub {
  my $self = shift;
  $self->render('index');
};

get '/test' => sub {
  my $self = shift;
  $self->stash(headers => $self->req->headers);
  $self->render;
};

get '/op';
get '/op/start' => sub {
  my $self = shift;

  $conn->txn(
    sub {
      $_->do(q|INSERT INTO ops VALUES (?) RETRUNING id|,
        undef, $self->get_header_value('eve_charid'));
    }
  );
};

under '/op/:op' => [op => qr/\d+/] => sub {
  my $self = shift;
  unless ($self->db->op_exists($self->param('op'))) {
    $self->render('op_not_found');
    return undef;
  }

  unless ($self->get_header_value('eve_trusted') eq "Yes") {
    $self->render('trust');
    return undef;
  }

  return 1;
};

get '/' => sub {
  my $self = shift;
  $self->render('op-index');
};

get '/harvest_table';
get '/loot_table';

post '/add_harvest' => sub {
  my $self = shift;
  $self->redirect_to('/');
};

get '/join' => sub {
  my $self = shift;
  $self->redirect_to('/');
};

get '/finish' => sub {
  my $self = shift;
  $self->redirect_to('/');
};

app->start;
