#!/usr/bin/env perl
use v5.18;
use Mojolicious::Lite;
use DBIx::Connector;

my $conn
  = DBIx::Connector->new("dbi:Pg:$ENV{DATABASE_URL}", '', '',
  {AutoCommit => 1, RaiseError => 1})
  or die;
$conn->mode('fixup');

####################
# Database Helpers #
####################
helper 'db.foreman_for' => sub {
  my ($c, $op) = @_;
  $conn->run(
    sub {
      my $dbh = $_;
      my $sth = $dbh->prepare_cached(
        q|SELECT ew.pilots.name
          FROM ew.ops JOIN ew.pilots ON ew.ops.foreman = ew.pilots.id
          WHERE ew.ops.id = ?|
      );
      $dbh->selectrow_array($sth, undef, $op);
    }
  );
};

# List pilots for the given op. Returns array ref
helper 'db.pilots_for' => sub {
  my ($c, $op) = @_;
  $conn->run(
    sub {
      my $dbh = $_;
      my $sth = $dbh->prepare_cached(
        q|SELECT ew.pilots.name, ew.pilots.id
          FROM ew.op_participants
          JOIN ON ew.op_participants.pilot_id = ew.pilots.id
          WHERE op_id = ?|
      );
      $dbh->selectcol($sth, undef, $op);
    }
  );
};

# Returns 1 if found, else 0
helper 'db.op_exists' => sub {
  my ($c, $op) = @_;
  $conn->run(
    sub {
      my $dbh = $_;
      my $sth
        = $dbh->prepare_cached(q|SELECT COUNT(*) FROM ew.ops WHERE id = ?|);
      $dbh->selectrow_array($sth, undef, $op);
    }
  );
};

helper 'db.harvested' => sub {
  my ($c, $op) = @_;
  $conn->run(
    sub {
      my $dbh = $_;
      my $sth = $dbh->prepare_cached(
        q|SELECT pilot, resource, units FROM ew.harvested WHERE id = ?|);
      $dbh->selectall_hashref($sth, undef, $op);
    }
  );
};

sub verify_pilot {
  my ($id, $name) = @_;

  return 0 unless $id and $name;

  return 1 if $conn->run(
    sub {
      $_->selectrow_array(
        q|SELECT COUNT(*) FROM ew.pilots WHERE id = ? AND name = ?|,
        undef, $id, $name);
    }
  );

  my $ua = Mojo::UserAgent->new;
  my $eve_id
    = $ua->get(
    "https://api.eveonline.com/eve/CharacterID.xml.aspx?names=$name")
    ->res->dom->at("row[name=$name]")->attr('characterID');
  my $eve_name
    = $ua->get("https://api.eveonline.com/eve/CharacterName.xml.aspx?ids=$id")
    ->res->dom->at('row[characterID=$id]')->attr('name');

  if ($id eq $eve_id && $name eq $eve_name) {
    my $rv = $conn->txn(
      sub {
        $_->do(q|INSERT INTO pilots (id, name) VALUES (?, ?)|,
          undef, $id, $name);
      }
    );
    return 1 if $rv == 1;
  }

  return 0;
}

################
# Data Helpers #
################
helper get_header_value => sub { return shift->req->headers->header(shift) };

helper trusted_by_eve =>
  sub { return shift->get_header_value('eve_trusted') eq "Yes" };

helper format_number => sub {
  use Number::Format;
  my ($c, $n) = @_;
  state $f = Number::Format->new(-thousands_sep => ',', -decimal_point => '.');
  return $f->format_number($n);
};

get '/' => sub {
  my $c = shift;
  $c->render('index');
};

get '/bad-pilot';

get '/test' => sub {
  my $c = shift;
  $c->stash(headers => $c->req->headers);
  $c->render;
};

get '/new-op' => sub {
  my $c = shift;

  unless ($c->trusted_by_eve) {
    $c->render('trust');
  }

  my $pilot_id   = $c->get_header_value('eve_charid');
  my $pilot_name = $c->get_header_value('eve_charname');
  if (verify_pilot($pilot_id, $pilot_name)) {
    my $op = $conn->txn(
      sub {
        $_->selectrow_array(
          q|INSERT INTO ew.ops (foreman) VALUES (?) RETURNING id|,
          undef, $pilot_id);
      }
    );
    $c->redirect_to("/op/$op");
  }
  else {
    $c->render('bad-pilot');
  }
};

under '/op/:op' => [op => qr/\d+/] => sub {
  my $c = shift;
  unless ($c->db->op_exists($c->param('op'))) {
    $c->render('op-not-found');
    return undef;
  }

  unless ($c->trusted_by_eve) {
    $c->render('trust');
    return undef;
  }

  return 1;
};

get '/' => sub {
  my $c = shift;
  $c->render('op-index');
};

get '/harvest-table';
get '/loot-table';

post '/add_harvest' => sub {
  my $c = shift;
  $c->redirect_to('/');
};

get '/join' => sub {
  my $c          = shift;
  my $pilot_id   = $c->get_header_value('eve_charid');
  my $pilot_name = $c->get_header_value('eve_charname');
  $c->render('bad-pilot') unless verify_pilot($pilot_id, $pilot_name);
  $c->redirect_to('/');
};

get '/finish' => sub {
  my $c = shift;
  $c->redirect_to('/');
};

app->start;
