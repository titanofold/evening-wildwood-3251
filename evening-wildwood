#!/usr/bin/env perl
use v5.20;
use experimental 'signatures';
no warnings "experimental::signatures";
use Mojolicious::Lite;
use Mojo::Pg;
use Mojo::Util qw(b64_encode);

my $config = plugin 'Config';

helper pg => sub {
  state $pg = Mojo::Pg->new($ENV{DATABASE_URL} || $config->{database_url});
};

####################
# Database Helpers #
####################
helper 'db.foreman_for' => sub ($c, $op) {
  $c->pg->db->query(
    q|
    SELECT ew.pilots.name
    FROM ew.ops JOIN ew.pilots ON ew.ops.foreman = ew.pilots.id
    WHERE ew.ops.id = ?
    |, $op
  )->array;
};

# List pilots for the given op. Returns array ref
helper 'db.pilots_for' => sub ($c, $op) {
  $c->pg->db->query(
    q|
      SELECT ew.pilots.name, ew.pilots.id
      FROM ew.op_participants
      JOIN ON ew.op_participants.pilot_id = ew.pilots.id
      WHERE op_id = ?|, $op
  )->arrays;
};

# Returns 1 if found, else 0
helper 'db.op_exists' => sub ($c, $op) {
  $c->pg->db->query(
    q|
    SELECT COUNT(*) FROM ew.ops WHERE id = ?
    |, $op
  );
};

helper 'db.harvested' => sub ($c, $op) {
  $c->pg->db->query(
    q|    SELECT ew.pilots.name AS pilot,
                     ew.harvestable_types.name AS resource,
                     ew.harvested.units
                FROM ew.harvested
          INNER JOIN ew.pilots ON ew.harvested.pilot_id = ew.pilots.id
          INNER JOIN ew.harvestable_types
                     ON ew.harvested.resource_id = ew.harvestable_types.id
               WHERE ew.harvested.op_id = ?|, $op
  )->array;
};

sub verify_pilot ($id, $name) {
  return 0 unless $id and $name;

  state $pg = Mojo::Pg->new($ENV{DATABASE_URL} || $config->{database_url});
  my $db = $pg->db;

  return 1
    if $db->query(q|SELECT COUNT(*) FROM ew.pilots WHERE id = ? AND name = ?|,
    $id, $name)->array->[0];

  my ($eve_id, $eve_name);
  my $ua = Mojo::UserAgent->new;

  my $res = $ua->get(
    "https://api.eveonline.com/eve/CharacterID.xml.aspx?names=$name")->res;
  $eve_id = $res->dom->at("row[name=$name]") if $res->code == 200;
  $eve_id = $eve_id->attr('characterID')     if $eve_id;

  $res
    = $ua->get("https://api.eveonline.com/eve/CharacterName.xml.aspx?ids=$id")
    ->res;
  $eve_name = $res->dom->at("row[characterID=$id]") if $res->code == 200;
  $eve_name = $eve_name->attr('name') if $eve_name;

  my $results;
  if ($eve_id && $eve_name && $id eq $eve_id && $name eq $eve_name) {
    $db->begin;
    $results
      = $db->query(q|INSERT INTO ew.pilots (id, name) VALUES (?, ?)|, $id,
      $name);
    $db->commit;
  }

  return 1 if $results->rows == 1;

  return 0;
}

################
# Data Helpers #
################
helper get_header_value =>
  sub ($c, $h) { return $c->req->headers->header($h) };

helper trusted_by_eve => sub ($c) {
  my $trusted = $c->get_header_value('eve_trusted');
  return $trusted && $trusted eq "Yes" ? 1 : 0;
};

helper format_number => sub ($c, $n) {
  use Number::Format;
  state $f = Number::Format->new(-thousands_sep => ',', -decimal_point => '.');
  return $f->format_number($n);
};

##########
# Routes #
##########
get '/' => sub ($c) {
  my $op_id;
  if ($c->param('j') or $c->param('l')) {
    $op_id = $c->param('l') || $c->param('j');
    $op_id =~ s/\D//g;
  }

  if    ($op_id and $c->param('j')) { $c->redirect_to("/op/$op_id/join") }
  elsif ($op_id and $c->param('l')) { $c->redirect_to("/op/$op_id") }
  else                              { $c->render('index') }
};

get '/db_setup' => sub ($c) {
  my $migrations = Mojo::Pg::Migrations->new(pg => $c->pg);
  $migrations->from_file('migrations.sql');
  $migrations->migrate;
  if ($migrations->active == $migrations->latest) {
    $c->render(
      code => 200,
      text => 'Database migrated to '
        . $migrations->active
        . '. EVEning Wildwood is ready to do your bidding.'
    );
  }
  else {
    $c->render(
      code => 500,
      text => 'Database migration failed. Check STDERR for reasons why.'
    );
  }
};

get '/login' => sub ($c) {
  my $tokens = $c->pg->db->query(
    'SELECT gen_random_uuid() AS session, gen_random_uuid() AS state')->hash;

  $c->session->{token} = $tokens->{session};

  my $eve_url
    = Mojo::URL->new('https://login.eveonline.com/oauth/authorize')->query(
    client_id     => '',
    redirect_uri  => $c->url_for('/callback')->to_abs,
    response_type => 'code',
    scope         => '',
    state         => $tokens->{state}
    );
  $c->redirect_to($eve_url);
};

get '/callback' => sub ($c) {
  my $result = $c->pg->db->query(
    q|SELECT requested_uri
                        FROM login_mgmt
                        WHERE session_token = ? AND state_token = ?|,
    $c->session->{token}, $c->param('state')
  )->hash;

  my $auth_key
    = b64_encode $config->{client_id} . ':' . $config->{client_secret};

  my $good_auth;

  if ($ENV{EWTESTING}) {
    $good_auth = $ENV{EWAUTHTEST};
  }
  else {
    my $ua = Mojo::UserAgent->new;

    $ua->post('https://login.eveonline.com/oauth/token' =>
        {Authorization => "Basic $auth_key"} => form =>
        {grant_type => 'authorization_code', code => $c->param('code')});
  }

  if   ($good_auth) { $c->redirect_to($result->{requested_uri}) }
  else              { $c->render('bad-pilot') }
};

get '/test' => sub ($c) {
  $c->stash(headers => $c->req->headers);
  $c->render;
};

get '/op/new' => sub ($c) {
  my $pilot_id   = $c->get_header_value('eve_charid');
  my $pilot_name = $c->get_header_value('eve_charname');
  if (not $c->trusted_by_eve) {
    $c->render('trust');
  }
  elsif (not verify_pilot($pilot_id, $pilot_name)) {
    $c->render('bad-pilot');
  }
  else {
    my $db = $c->pg->db;
    $db->begin;
    my $op
      = $db->query(q|INSERT INTO ew.ops (foreman) VALUES (?) RETURNING id|,
      $pilot_id);
    $db->commit;
    $c->redirect_to("/op/$op");
  }
};

under '/op/:op' => [op => qr/\d+/] => sub ($c) {
  unless ($c->db->op_exists($c->param('op'))) {
    $c->render('op-not-found');
    return;
  }

  unless ($c->trusted_by_eve) {
    $c->render('trust');
    return;
  }

  return 1;
};

get '/' => sub ($c) { $c->render('op-index') };

get '/harvest-table' => 'harvest-table';
get '/loot-table';

post '/add-harvest' => sub ($c) { $c->redirect_to('/') };

get '/join' => sub ($c) {
  my $pilot_id   = $c->get_header_value('eve_charid');
  my $pilot_name = $c->get_header_value('eve_charname');
  $c->render('bad-pilot') unless verify_pilot($pilot_id, $pilot_name);
  $c->redirect_to('/');
};

get '/finish' => sub ($c) { $c->redirect_to('/') };

# Copied from:
# https://github.com/kraih/mojo/wiki/Apache-deployment
app->hook(
  'before_dispatch' => sub {
    my $self = shift;
    if ($self->req->headers->header('X-Forwarded-Host')) {

      #Proxy Path setting
      my $path = shift @{$self->req->url->path->parts};
      push @{$self->req->url->base->path->parts}, $path;
    }
  }
);

app->start;
